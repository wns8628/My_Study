HTTP 메소드 

 자주쓰이는것들 

  - GET      => 서버에게 resource를 보내달라고 요청합니다. 서버(혹은 DB)의 resource는 클라이언트로 전달만 될 뿐 변경되지 않습니다. 

  - POST     => 서버에게 resource를 보내면서 생성해 달라고 요청합니다. 예를들어 회원가입을 하면 DB에 새로운 회원정보가 등록되고, 사진을 업로드 하면 그 사진이 웹사이트에 등록됩니다.

  - PUT      =>	서버에게 resource의 업데이트 하거나 resource가 없다면 새로운 resource를 생성해 달라고 요청합니다. 회원정보 수정 등에 사용됩니다.

		PUT은 PATCH와 비교해서 전체 데이터를 교체하는 차이점이 있습니다.

		가령 user data의 구조가 user._id, user.firstName, user.lastName, user.age라고 한다면, 회원정보 수정시 PUT은 _id를 찾아 age만 업데이트하더라도 항상 모든 필드값을 가져와서 모든 필드를 항상 새로운 값으로 교체합니다.


  - PATCH    => 서버에게resource의 업데이트를 요청합니다. 회원정보 수정 등에 사용됩니다.

		PATCH는 PUT과 비교해서 부분 데이터를 업데이트하는 차이점이 있습니다.

		가령 user data의 구조가 user._id, user.firstName, user.lastName, user.age라고 한다면, 회원정보 수정시 PATCH는 _id를 찾아 age만 업데이트할때 _id와 age만 받아와서해당 부분을 업데이트 합니다.


  - DELETE   => 서버에게 resource의 삭제를 요청합니다.

 
========================================================================================================================

  맨처음 git설치! 회원가입후 폴더만들고 

<git 초기 설정>

 git을 사용하기 위해서는 user.email과 user.name을 등록해야 합니다. 아래 두개의 명령어는 git을 설치하고 한번만 해주시면 됩니다.

 $ git config --global user.email "<이메일 주소>"
 $ git config --global user.name "<이름>"

 하고난뒤 

  - 깃사이트 들어가서 폴더만들고 

  - git init 하면됨

git remote add origin https://github.com/wns8628/-.git
git push -u origin master

  이런거   쭈루루룩하고

이제 온라인에 myapp의 저장소가 설정되고 저장되었습니다. 앞으로 프로젝트를 저장하고 싶을 때는 

git add .

git commit -m "<commit message>"

git push -u origin master

를 사용하시면 됩니다.

******************************************************************************

커밋한거 불러오거나 되돌릴때 

 일단 확인은  

 git log --oneline 

 git reset --hard [id]
 git reset --soft [id]
==================================
 

hello-world.git 을 clone 한 적이 있는 경우: 터미널에서 해당 폴더로 이동 후 아래 명령어들을 붙여넣기합니다. 폴더 내 모든 코드가 이 게시물의 코드로 교체됩니다. 이를 원치 않으시면 이 방법을 선택하지 마세요.
git reset --hard
git pull
git reset --hard 38f5b9f
git reset --soft 852384b
npm install
atom .
hello-world.git 을 clone 한 적이 없는 경우: 터미널에서 코드를 다운 받을 폴더로 이동한 후 아래 명령어들을 붙여넣기하여 hello-world.git 을 clone 합니다.
git clone https://github.com/a-mean-blogger/hello-world.git
cd hello-world
git reset --hard 38f5b9f
git reset --soft 852384b
npm install
atom .

==========================================================================================================================
 <npm init>

npm init 명령어는 node 프로그램을 시작(initialize)하는 명령어로 package.json 파일을 생성을 돕습니다. 
package.json 파일은  해당 node 프로그램에 대한 기본 정보를 담고 있는 파일입니다.


 이거해주고 

======================

 express 설치! 

 npm install express --save

 이러면 진짜 기본적인세팅끝 

=============================================================

var express = require('express');

var app = express();

app.get('/',function(req,res){
  res.send('hello world!');
});

app.listen(3000,function(){
  console.log("server on!")
});

 시작 ! 
=======================================================

 정적폴더세팅 하고 

 app.use(express.static(__dirname + '/public')); // 1

 세팅

===================================
  
 동적폴더 세팅

 npm install --save ejs   => ejs쓸거임 

 view폴더

 app.set("view engine","ejs"); // 1

 <% %> <%= %>


=================================================
  
 자이제 디비세팅! 

 1) 몽고디비가입로그인 (mlab.com)
 
 2) 우측 중앙 번개모양 Create new 버튼을 누릅니다.

 3)플랜을 정해야 하는데, 저는 무료 플랜을 고르겠습니다.
   Cloud Provider 는 Amazon's US East Region 으로,
   Plan 은 Single-node 의 Sandbox 로 해 줍니다.

 4) 사용할 Database name을 입력한 후에 Create new MongoDB deployment 버튼을 눌러주면 데이터 베이스 생성이 완료됩니다.

 5) ds019856/contact_book 이 새로 생성된 DB입니다. 각자 생성한 DB를 클릭합니다.
    이 DB는 바로 사용할 수 없고, DB 사용자를 등록해야 합니다.
 6) Users 탭의 Add database user를 눌러줍니다.

 7) DB user의 username과 password를 입력해 줍니다.
 
 8) 두번째 uri에서 <dbuser>:와<dbpassword>를 자신이 생성한 DB user의 username과 password 로 바꿔주시고 
    컴퓨터에 환경변수로 저장하여 사용하시기 바랍니다. 
    DB 접속 uri를 프로그램 코드에 바로 등록하여 사용하는 것은 좋지 않습니다.
 
 
 -환경변수 세팅- 

 시스템 >고급 시스템 설정 > 좌측 시스템 속성 메뉴 클릭 > 고급 탭 > 환경 변수 버튼 클릭

  웹 개발에서는 특정한 값을 프로그램 코드에서 숨기기 위해서도 사용됩니다. github등의 온라인 코드 
  저장소를 사용하면 내가 만든 코드가 온라인에 공유가 되게 되는데, 
 이때 DB접속 username/password 등의 중요한 정보를 숨기고자 할 때 사용됩니다.

-----------------------

 자 npm install --save mongoose 로 몽고디비설치

// DB setting

 var mongoose = require("mongoose");
 
 mongoose.connect(process.env.MONGO_DB, { useMongoClient: true }); // 1
 var db = mongoose.connection; // 2
 // 3?
 db.once("open", function(){
 console.log("DB connected");
 });
 // 4
 db.on("error", function(err){
  console.log("DB ERROR : ", err);
 });

 1. 환경변수에 저장된 값을 사용하여 mongoDB에 접속합니다.
 2. mongoose의 db object를 가져와 db변수에 넣습니다.
 3. db가 성공적으로 연결된 경우 "DB connected"를 출력합니다.
 4. db연결중 에러가 있는 경우 "DB ERROR : " 과 에러를 출력합니다.

====================================
 
 npm install --global nodemon 노드몬으로 서버실행! 다운 ! 


==------------------------------------- 자여기까지 진짜 기본세팅끝! ----------------------------------------------------------------

 자 CRUD와 

주소록 프로그램에서 주소가 생성, 조회, 수정, 삭제가 가능하다면 
'이 프로그램에서 주소는 CRUD가 가능하다'고 말할 수 있습니다.
(다른 예: '이 프로그램에 게시물 CRUD 기능을 넣어주세요' )


  7 Standard Actions 

 생성  - Create- 전달받은자료를 실제로생성  - POST( /data ) 

 조회  - NEW   - 작성 폼을보여주고 	    - POST ( /data/new ) ?
       - Edit  - 수정 폼을보여주고 	    - GET ( /data/:id/edit)   
       - INDEX - 자료들의 목록을 보여주고   - GET ( /data )
       - show  - 목록중 하나를 자세히보여줌 - GET ( /data/:id )

 수정  - Update - 전달받은자료를 실제로 수정함      - PUT ( /data/:id )
 
 삭제  - Destroy - 자료삭제 (지운는건 폼이필요없다) - DELETE ( /data/:id )
---------

 * data는 action의 대상을 나타내며 영어 복수형으로 적어줍니다.
   (예를 들어 전화번호의 new action이라면 route은 phones/new가 됩니다.)

 * :id는 하나의 특정한 data를 나타내주는 key값으로 변화되는 값입니다.
 
------------------------------------------------------------------------

 주소록만들기-

 form으로 전송된 data를 사용하기 위해서는 body-parser를 사용해야 합니다. 
 npm install --save body-parser

