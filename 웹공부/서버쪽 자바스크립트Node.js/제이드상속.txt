jade -extends


 재이드 파일끼리 중복되는 코드를 상속으로 처리한다.?

 html
  head
  body
   ol
     li javaScript
     li nodejs
     li expressjs
   article
     block content     1] 중복된부분은 묶어주고 block content로 뭐가올건지 명시 

		       2] 중복된거 말고 고유한 정보는 따로다른파일에넣고 
			   extends ./중복된코드있는파일  
                           bolck content
                              고유한정보 

                       3] 이런식으로쓰면됨 ! 

---------------------------------------------------------------

 사용자모듈 - 이걸이용해서 정리정돈 ! 

var cal = require('./lib/calculator'); 이렇게땡겨와서 쓸수있다..
 

다른파일]	
module.exports.sum = function(a,b){
      return a+b;
}

.sum 은 메소드이름이라고보면됨 부를때  cal.sum(1,2) 이런식으로쓴다

-----------------------------------------------------------------------------
라우터 분리하기 

1]
var p1 = express.Router();          //라우터만듬 
p1.get('/r1', function(req,res){
  res.send('hello /p1/r1');	    //앱대신 라우터
});
p1.get('/r2', function(req,res){
  res.send('hello /p1/r1');
});
app.use('/p1', p1);               //이걸꼭해줘야함 p1으로들어오는건 p1라우터가 다처리하겠다~


2] 근데 이렇게하면 존나 쓸모가없음 그래서 별로의 파일로	빼자 

  2.1) routes 라는 폴더만들고 p1파일만들고 

       거기에

	var express = require('express');   =>이건왜써야하는지알지? 이모듈을써야하니깐!

	var p1 = express.Router();
	p1.get('/r1', function(req,res){
	  res.send('hello /p1/r1');
	});
	p1.get('/r2', function(req,res){
	  res.send('hello /p1/r2');
	});
	
	module.exports = p1;		   => 모듈화를만들기위해 이렇게쓴다.

  
3] 그리고 처음 본체파일에 
	
	var p1 = require('./routes/p1');   => 위에껄 부품으로 가져오고 
	app.use('/p1', p1);                => 사용하면된다.

-------
4] app을 매개변수로 넘겨줘서 쓸수있다 독립적이지않고 넘겨서 같이 쓰는개념 

  4.1)  var p2 = require('./routes/p2')(app);       =>걍이렇게 뒤에 (app) 써서넘겨주고 
        app.use('/p2', p2);
 

  4.2)   module.exports = function(app){        => 모듈로 라우터를넘기지말고 함수를넘기고 리턴값으로 라우터를넘김
	  여기다 원래있던코드붙여넣어~   

        return p2;	=> 리턴값으로 라우터를넘김
	}



              