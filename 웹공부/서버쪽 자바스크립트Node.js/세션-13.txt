세션

 쿠키를 좀더 안전하고 스케일업을 한 것임 = 로그인 기능사용

 
1] 사용자가 서버에 접속을한다 (통신할때 헤더를작성해서 넘긴다)
 
2] 서버가 사용자컴퓨터에 사용자의 id값 만저장시킨다.(식별)

3] 그값에 해당하는 실제정보들은 서버쪽에저장[디비나 파일이나 메모리]


-----------
  쿠키에 connect.sid=~~~   = 아디값을 사용자에게 셋시키면

                             다음부터 이아디값으로 접속하면 동일한 사용자로 간주

  서버쪽에서는 저 아디값을이용해서  디비나 파일이런곳에 

		                    정보를 저장해놓는다. ex)카운트값 

                
-------------

 * 카운터값증가시키기 


  요청이들어오면 그아디값에 해당하는 사용자의 정보(카운트값)을 가져와서

  그 값을+1 시켜서 사용자의 웹브라우저에게 응답을하면됨



1] npm install express-session --save 익스프레스-세션 패키지다운 

2] 부품추가(찾아봐..) 


3] req.session.count = 1; 이것의 의미는

        사용자의 쿠키 id값 으로 접속했을때 count=1 이라는정보랑 매칭을시키는것임 
                   	
   즉 정보를 저장함과동시에                                   

   req.session.count 을통해서 읽어올수도있다. 	  

if(req.session.count){				= 세션값이 존재(있으면)
    req.session.count++                         = 세션값을 증가시킨다.
  }else {
   req.session.count =1;                        = 없으면 세션값을추가한다
  }
  res.send('count : '+req.session.count);       = 출력
});



익스프레스-세션은 메모리에저장함 껏다키면 세션날라감

실제 서비스할떄는 디비에해라 .. 
----------------------------------------------------------------


 로그인 상태 구현해보자 원리를파악하자

  1] 디비안에 아디비번 그리고 별명(로그인했을때 닉네임)정보를저장 
  
  2] form에서 보낸정보랑 맞는지 안맞는지 조건검사
         post로 보냈으니 이런식으로 받아서 검사할수있겠지 ? = req.body.username
  
  3] 정보랑 일치하면 세션을 별명으로 박아넣는다.   req.session.displayName = user.displayName;

  4] 성공하면 성공페이지를보여준다.
     실패하면 실패 페이지를 보여준다.
  
  5] 성공페이지에서도 조건검사를한다 세션별명이

	있으면 	로그인된화면 

        없으면  로그인안된화면.

-------------------------------------------------------------------------------

 * 세션스토어 

   지금까지는 익스프레스 세션을썻다 = 메모리에저장 : 즉 서버껏다끼면 다날라감


   그래서 보통 영구적으로 저장가능한 파일, db를사용 
-------------------------------
    
 1] 디렉토리에 파일로저장해보자 

        모듈이있다  var FileStore = require('session-file-store')(session); 모듈가져옴 (session)은 의존성때문


 2]  store:new FileStore() 그리고 세션레고에다가 이 옵션을해준다.
			   세션을 파일에 저장하겠다! 이말임 이걸하면 알아서 디렉토리만들고 파일만듬!

-----------------------------------

    DB에 저장해보자 (mysql)

 1] 이것도 모듈받아서

	var MySQLStore = require('express-mysql-session')(session);  이렇게하고 



 2] 세션레고 옵션에다가 

  store:new MySQLStore({               스토어옵션에 new Mysqlstore하고 인자를넣어준다.
    host: 'localhost',
    port: 3306,
    user: 'root',
    password: 'twiceioi',
    database: 'os'
  })

			이렇게 세팅해줘야한다 꼭! 
	

 3] 그러면 os 라는 디비에다가 자동적으로 세션테이블이만들어지고 관리를해준다!



 4] 디비에 저장되고난뒤에 기능이 실행되도록 하기위해서 (안정상의이유) 

	  req.session.save(function(){
	  	res.redirect('/welcome');
  	    });                           리다이렉션을 콜백으로실행되게= 저장된뒤 콜백
									req.session.save 이걸쓰면된다. 


----------------------------------------------------------------------------------------------


다중사용자 

 회원가입  일단은 파일로해보자 

 1] 전역변수 배열을만든다 = 유저정보담을것 

 2]회원가입페이지만들고

   그정보를 받아서  전역변수에 push한다. 푸쉬하고 리다이렉트로 로그인페이지로가면되겠지

 
 3] 로그인할때 적은정보랑 전역변수배열에 있는 값이랑 

   하나하나 비교를해서 맞으면 로그인된 페이지로가면된다. 
 

  var uname = req.body.username;				
  var pwd   = req.body.password;				    =>포스트방식으로받은것 변수에담는거지

for(var i=0; i<users.length; i++){                                  => users=전역변수길이까지 반복
    var user = users[i];					    => 하나하나빼옴
    if(uname === user.username && pwd === user.password){           => 비교
      req.session.displayName = user.displayName;                   => 맞으면 별명세션이박힘
      return req.session.save(function(){			    => * 리턴을해야지 맞았을때 더이상반복을안함
             res.redirect('/welcome');				    => save저걸쓴이유는 세션이저장되고 실행되도록하기위해 안전성!
      });					
    }
  }
  res.send('who are you?<a href="/auth/login">login</a> ');         => 아디비번이하나도안맞으면 이게실행되겠지


 
----------------------------------------------------------------------------------------------------------------------








			                           
 









 





 