git프로젝트를 저장하고 싶을 때는 

git add .

git commit -m "<commit message>"

git push -u origin master

를 사용하시면 됩니다.

----------------

 몽고디비 사이트 https://mlab.com/ 

ORM(Object-relational mapping) 이라는 새로운 방법이 도입되었습니다.
데이터베이스를 프로그램의 object 로 만들어 버리고 함수명령어를 만들어
데이터베이스를 조작하는 것이죠.

 mongoose 가 뭡니까 라고 물으면 mongoose 는 ORM 입니다. 
 라고 첫문장을 시작하면 됩니다.

"로그인 기능이 있는 게시판을 만듭니다. 
모델과 스키마를 구상해 보세요." 라고 물으신다면, 
"유저(user)모델과 게시글(post)모델이 필요합니다. 
유저스키마는 아이디, 비밀번호가 필요하고, 
게시글스키마는 글제목, 글내용, 작성자, 작성시간이 필요합니다."
 뭐 대충 이런식입니다. 이해가 되셨나요?

--------------------------------------------

자바스크립트에서 process.env.{{환경변수 이름}} 을 
써주시면 이 값을 언제든지 읽어올 수 있습니다.

--------------------------------------------
 REST 는  서버와클라이언트 사이에 데이터를 전송할때  http프로토콜이용하는것  

	  JOSN 이용

 RESTful은 뭘까.

 REST는 기술에 대한 설명이고, RESTful은 그 기술을 사용하는 매너라고 보시면 됩니다. 
 흔히 RESTful design 라고함


--

미들웨어(middleware)란?

 서버에 도착한 신호는 router를 통해서 어떤 response를 할지 결정이 되는데,
 router를 통하기 전에(서버도착 - router 중간에) 모든 신호들에게 수행되는 명령어를
 미들웨어(middleware)라고 합니다. 
 app.use()를 통해 수행될 수 있으며, 당연히 router보다 위에 위치해야 합니다. 


----------------------------------------------------------
-로그인 기능 

Post 처럼 만들면 되는데, 7가지 기본 Actions(index, show, create, new, edit, update, destroy) 중에서 index와 destroy는 만들지 않겠습니다.

즉, 모든 유저들을 나열하여 보여주는 기능과, 유저를 삭제(회원탈퇴) 기능이 없다는 뜻입니다.

CRUD(Create, Read, Update, Delete)중에 Delete이 없는 것이기도 한데,

굳이 모든 데이터에 CRUD를 따르겠다고 생각하시는 분은(바람직한 자세입니다.) 직접 추가하시기 바랍니다. 어렵지 않아요~~

----------------

javascript:history.back() =>뒤로가기 자바스크립트


-----------------------------------------------------------------------------------------------------------------
mongoose.model() 로 생성된 오브젝트로 사용할수 있는 함수들 중에 자주 쓰는 몇 가지 표로 정리해보았습니다.

 함수
 
 설명
 

 findOne(오브젝트,callback 함수)
 
 인자로 넘겨 받은 오브젝트에 해당하는 데이터를 하나 찾습니다. 해당하는 데이터가 하나 이상으로 예상되는 경우에는 사용하지 않는 것이 바람직합니다. callback함수로 넘겨지는 data 역시 하나의 object입니다.
 

 find(오브젝트, callback 함수)
 
 오브젝트에 해당하는 데이터를 모두 찾습니다. callback 함수로 넘겨지는 data는 array입니다.(설사 결과가 하나라고 하더라도 array입니다.)
 

 create(오브젝트, callback 함수) 
 
 오브젝트의 데이터 중에 schema와 일치하는 데이터들만 모아 새로운 데이터를 만듭니다.
 

 findOneAndUpdate(오브젝트1, 오브젝트2, callback 함수)
 
 오브젝트1에 해당하는 데이터를 찾아 오브젝트2로 교체합니다. 즉 오브젝트2는 오브젝트의 1의 필요한 모든 데이터를 가지고 있어야 합니다. 예를 들어 스키마에 10가지 항목이 있고, 한가지 항목만 업데이트하려고 한다면 이 함수는 올바른 선택이 아닐 수도 있습니다. 이런 경우에는 위 예제의 56~63줄 처럼 findOne으로 찾고, 해당 항목을 변경한 후 .save()하시면 됩니다.
 
 findOneAndRemove(오브젝트, callback함수)  오브젝트에 해당하는 데이터를 하나 찾아 지워버리는 함수입니다.


-------------------------------------------------------------------

---홈피만들때---

//임포트 모듈 
var express = require('express'); 
..
//디비연결

//모델 세팅
var postSchema = mongoose.Schema({
..
//뷰세팅
app.set("view engine",'ejs');

//미들웨어 세팅
app.use..

//라우터세팅
app.get
app.post 
이런거 

//서버시작
app.listen

------------------------

 npm i passport passport-local express-session connect-flash async --save

 계정만들때 필요한 패키지들


 package 
 
 하는 일
 
 passport
 
 nodeJS에서 계정관리를 할 때 가장 많이 쓰이는 package입니다. 300개 이상의 인증방식을 지원한다고 웹사이트에서 광고를 하고 있죠. 

 이 각각의 인증방식을 strategy라고 부르는데, 페이스북을 이용해서 로그인하는 것을 facebook strategy, 트위터를 써서 로그인하는 방식을 twitter strategy 이런 식입니다. 웹사이트에 들어가면 회원가입을 하지 않고 페이스북버튼을 누르면 페이스북 로그인창이 뜨고 정보를 입력하면 가입되는 방식같은 것들이죠.

 우리는 좀 더 고전적인, 사이트에 직접 가입하는 방법을 사용하겠습니다. 이것을 local strategy라고 합니다.

 그래서 passport-local 페키지도 설치를 한것이구요.
 

 express-session
 
 로그인이 되고 나면 로그아웃을 하기 전까지 웹사이트는 해당 유저가 로그인이 되어 있다는 것을 알고 있습니다. 또한 해당 유저별로 데이터를 따로 관리할 수도 있죠. 이 정보가 session으로 저장되기 때문인데. 이를 도와 주는 package입니다.
 

 connect-flash
 
 session에 자료를 flash로 저장하게 해주는 package입니다. flash로 저장된 정보는 한번 읽어오면 지워집니다. 주로 서버에서 유저에게 메세지를 날리는 용도로 많이 쓰입니다. 코드를 보시면 이해가 될 겁니다.
 

 async
 
 nodeJS는 기본적으로 callback을 사용해서 비동기(async)로 동작합니다. 시간이 걸리는 부분에서 마냥 기다리지 않고 다음 코드를 먼저 진행하여 대기시간을 줄이는 것이지요. (시간이 걸린다고 무조건 넘어가는 것이 아니라 비동기를 사용하고 있는 함수에서만 이렇습니다. 내가 쓴 코드가 다음줄로 넘어가면 어떡하나 걱정할 필요는 없습니다.) 이 package는 비동기를 도와주는 package같은데, 전 비동기 함수들을 동기(sync)로 사용하기 위해 사용하였습니다.

