jQuery

인기있는 라이브러리 

자주 사용하는 로직을 재사용할 수 있도록 고안된 소프트웨어를 라이브러리라고 한다.


jQuery를 인터넷에서 다운받아서 폴더에넣고


<script src="http://localhost/CSS_practice/jquery.js"></script> 이런식으로 바디태그나 헤드태그에 넣어준다.

그리고 

   <script>
 jQuery(document).ready(function($){
    $('body').prepend('<h1>hello<h1>');
    });
  </script>
 
이런식으로 쓰면됨  바디태그를가르키고 prepend() :  바디태그 앞쪽에 ()안의 내용을써준다. 


---------------------------

$()			      = JQuery함수임 인자로뭐가들어오는지에따라달라짐

      			        보통 'css 선택자' 가 들어옴

$('li')       		      = li태그를선택한거 이걸통해 'j쿼리 객체를 리턴함'

$('li').		      = j쿼리 객체의 프로퍼티를 부를때 . 을씀

$('li').css('color','red');   = j쿼리객체의 css메소드임 

                                  <li>태그의style을 바꿈       

-------------------


1]DOM.
	var lis = document.getElementsByTagName('li');
	for(var i=0; i < lis.length; i++){			태그제어 
    	lis[i].style.color='red'; 

	
	var lis = document.getElementsByClassName('active');
	for(var i=0; i < lis.length; i++){			클래스값태그제어
    	lis[i].style.color='red';   
	}
	

	var li = document.getElementById('active');
	li.style.color='red';					아이디값태그제어 
	li.style.textDecoration='underline'


2]jQuery	
  	
        $('li').css('color', 'red');


	$('.active').css('color', 'red');

	
	$('#active').css('color', 'red').css('textDecoration', 'underline')

			**첫번쨰인자만있으면 가져오는거고(첫번째등장하는엘리먼트값만가져옴)(뭔지 알아낼때 밑줄쳐져있으면 그정보를가져옴)
                          두번째인자까지있으면 설정이다.****



      **마지막거는 제이쿼리객체를리턴받아서 css메소드를 실행시킨값도 객체이기때문에 
        그 객체에 다시 메소드를 실행시키는것이다  
	 (chaining 체인징, 사슬)


1번과 2번은 같은 효과지만 제이쿼리가 훨씬간단하다 반복문을안해도됨 내부적으로는하겠지

-----------------------------------------------------------------------

*값을 조회하는방법

var li = $('li'); 이렇게 제이쿼리 객체가 리턴되면 

유사배열과 같아서 li[0] 이런걸로 값을 조회,가져올수있다.

한가지 주의할 것은 li[i]의 값은 해당 엘리먼트에 대한 jQuery 객체가 아니라 DOM 객체라는 것이다. 

그래서 css메소드를못쓴다 li[i].css 인런걸못쓰니 다시 저기다가 $를붙여서 

$(li[i]).css(~); 이렇게써야한다. 즉 객체에선 나온것은 돔객체라는것이다.



 * map을이용해서 조회

 map은 jQuery 객체의 엘리먼트를 하나씩 순회한다. 이 때 첫번째 인자로 전달된 함수가 호출되는데
 
 첫번째 인자로 엘리먼트의 인덱스
 두번째 인자로 엘리먼트 객체(DOM)이 전달된다. 

 그래서 이것도 마찬가지로 전달된 dom객체를이용해서 컬러를 바꿀려면 

 $(elem).css(~)  이렇게 제이쿼리객체를 만들어서 쓰면된다. $ 


-----------------------------------------------------------------------------------------

 jQuery API 

 제어할 대상을 선택한 후에는 대상에 대한 연산을 해야한다. 
 .css와 .attr은 jQuery 객체가 가지고 있는 메소드 중의 하나인데, 
 jQuery는 그 외에도 많은 API를 제공하고 있다. 이에 대한 내용은 jQuery API를 참고하자.


 https://api.jquery.com

--------------------------------------------------------


* 속성 api 를 jQuery로 속성제어를하면

 태그의 속성알지? attribute
	
 Element.getAttribute(name)           =name속성의 '값'을가져오는거 
 Element.setAttribute(name, value)    =name속성의 값을 설정한다.
 Element.removeAttribute(name);       =name속성을 지운다. 


이걸 jQuery 로 바꾸면   attr,removeAttr 이렇게 줄여서쓰면됨 

  var t = $('#target');

  console.log(t.attr('href')); 
  t.attr('title', 'opentutorials.org'); // title 속성의 값을 설정한다.
  t.removeAttr('title'); // title 속성을 제거한다.


 ---------이것도 속성방식과 프로퍼티 방식이있다.

 var t1 = $('#t1');
 
 console.log(t1.attr('href')); // ./demo.html  
 console.log(t1.prop('href')); // http://localhost/jQuery_attribute_api/demo.html 
 

 var t2 = $('#t2');
 
 console.log(t2.attr('checked')); // checked       체크박스속성값 그대로출력
 console.log(t2.prop('checked')); // true          체크되있으면 true 아니면 false 


 근데 이건 좋은게 className 이라안쓰고 모르고 class 라쳐도 
 jQuery가 알아서 보정해준다!! 개꿀

-----------------------------------
 * 조회
 
 getElementBy* 

 
이걸 jQuery 에서는 어캐할까? 특별객체의 하위에있는 클래스값만 조회 ? 어캐할까? 

 
  $( ".marked", "#active").css( "background-color", "red" );
  $( "#active .marked").css( "background-color", "red" );        이두개는같다. 

  $( "#active").find('.marked').css( "background-color", "red" ); 이것도기능은같다 

  .find는 체인을 끊지 않고 작업의 대상을 변경하고 싶을 때 사용한다. 

  $('#active').css('color','blue').find('.marked').css( "background-color", "red" );
 
  뭐이런식으로 쓸떄씀


-----------------------------------------
 
 jQuery 노드제어 

  jQuery에서 노드를 제어하는 기능은 주로 Manipulation 카테고리에 속해 있다. 

  엘리먼트추가 
               before              = 형제로 타겟앞에나옴 
               ------
               prepend             = 타겟자식으로 텍스트 앞에들어감
               content -텍스트임
               append              = 타겟 자식으로 들어감 텍스트뒤에 
               ------ 
               after               = 형제로 타겟뒤에나옴 


 $('.target').before('<div>before</div>'); 뭐 이런식으로씀 
 
-------------
 
 jQuery 노드삭제 

  1] remove        = 태그자체를없앰
  2] empty         = 텍스트를 없앰 

예)  $('#target1').remove();
     $('#target2').empty();

-----------
 jQuery 노드바꾸기 

 replaceAll  앞에껄 뒤에꺼에 덮어씌움 
 replaceWith  뒤에껄 앞에 덮어씌움 
 
   $('<div>replaceAll</div>').replaceAll('#target1');
   $('#target2').replaceWith('<div>replaceWith</div>');

-----------
 jQuery 노드복사 (클론)

   $('#source').clone().replaceAll('#target1');
   $('#target2').replaceWith($('#source').clone());

 복사해서 target1으로 바꿔치기하는거임 

---------
 jQuery 노드 이동 

   $('#target1').append($('#source'));   target1에 덧붙인다 소스라는아디값을가진태그를 (이동) 
                 prepend
                 before
                 after  다됨 ~ 
------------------
---------------------------------------------------------------------------------

 jQuery 이벤트 ****************************************************************************************

  var target = document.getElementById('pure');
    if(target.addEventListener){
        target.addEventListener('click', function(event){
            alert('pure');
        });


  이걸 jquery로 하면 
 
  $('#jquery').on('click', function(event){
         alert('jQuery');
     })


 이렇게 간단하게 할수있다. 

-- on API-------------------------------------------

 가장많이사용됨.
 
  문법) .on( events [, selector ] [, data ], handler(eventObject) )

         []는 생략가능 생략하면 그것에맞게 다르게동작함. 

             events = 클릭같은거 발생하면 handler가 함수라면 그게 동작함! 


 event : 등록하고자 하는 이벤트 타입을 지정한다. (예: "click")
 selector : 이벤트가 설치된 엘리먼트의 하위 엘리먼트를 이벤트 대상으로 필터링함
 data : 이벤트가 실행될 때 핸들러로 전달될 데이터를 설정함
 handler : 이벤트 핸들러 함수
---------
 

    $('ul').on('click','a, li', function(event){
        console.log(this.tagName);                    this는 a를클릭하면 a태그가 되고 li를 클릭하면 li가됨 
    })


 *late binding

jQuery는 존재하지 않는 엘리먼트에도 이벤트를 등록할 수 있는 놀라운 기능을 제공한다. 아래 코드를 보자. 


   $('body').on('click','a, li', function(event){
        console.log(this.tagName);
    })


 이코드가 위에있어도 밑에 a랑 li가없어도 body는 존재하기떄문에 이렇게할수있다. 
-------------------------------------

 하나의 엘리먼트에 여러개의 이벤트 타입을 동시에 등록하는 방법

 $('#target').on('focus blur', function(e){          //이런식으로 포커스와 블러를 동시에등록 
         $('#status').html(e.type);
     })


한번에 여러개의 이벤트 타입을 선택했다. 만약 이벤트에 따라서 다른 핸들러를 실행하고 싶다면 아래와 같이 코드를 변경한다.

   $('#target').on({
        'focus' : function(e){
 
        }, 
        'blur' : function(e){
             
        }
    })
--------------------------
  
 이벤트를 제거할 때는 off를 사용한다. 


  var handler = function(e){
    $('#status').text(e.type+Math.random());
  };

  $('#target').on('focus blur', handler)

  $('#remove').on('click' , function(e){          = 리무브버튼클릭시 함수발생
    $('#target').off('focus blur', handler);      = 이게 지우는거임 타겟을 off한다 포커스와 블러를 핸들러써준것은 저것만지울수있다. 
    console.log(32);
  })


