프로그램이 커지면 두가지로 나눈다

1.스케일 업 ! =하나의 컴퓨터를 업그레이드 

2.스케일 아웃 = 나누는것! 

지금까지는 

사용자 ---> 서버(웹서버,php,mysql)
                 -- 플랫폼 --    
                 -- 컴퓨터1(인프라)--

사용자가많아지면 죽는다 서버가-- 어떻게 할것인가 ? 

 * 분리 = 데이터베이스를 분리한다 

  컴퓨터1(웹서버,php) ----> 컴퓨터2(mysql)

   mysql_connect("컴퓨터2","root","111111"); 이렇게 접속


 이게바로 스케일 아웃 단점- 네트워크를 통해서(케이블)디비에접속 
  	 		    그래도 이게더 이득이 크기때문에 쓴다.! 

  근데또 부하가걸린다

  *또분리 컴퓨터1(웹서버) --> 컴퓨터3(php) --> 컴퓨터2(mysql)
                   (케이블을통해네트웤통신)

     이렇게 3개로나누면 

--컴퓨터3(php) 는 애플리케이션서버 라부르고 
--컴퓨터2(mysql)는 데이터베이스서버라 부르면된다 

근데 데이터가 더많이저장되서 또문제가발생 

컴퓨터4 를 사서 컴퓨터2(mysql master) 를 복제해서 mysql slave (노예)에 넣는다

그리고 php로 컴퓨터2(mysql master) 에는 쓰기작업을하고 

             컴퓨터4(mysql slave) 에는 읽기작업을한다  

       ex) $master =   mysql_connect("컴퓨터2","root","111111"); 
	   $slave  =   mysql_connect("컴퓨터4","root","111111"); 


	쓰기할때는
   	 mysqli($master, "INSERT INTO topic...");
         mysqli($master, "UPDATE...");
         mysqli($master, "DELETE FROM topic...");
                 
 이런식이고 
 
       읽기할때는

 	mysqli($slave, "SELET * FROM topic"); 

이렇게 한다 
          
왜이따구로할까? 쓰기라는게 골치아픈문제가있다 

컴터2,4 둘다 쓰기를한다치면 존재안하는 데이터를 수정한다?(중복쓰기?)
뭐이런 말도안되는 일이 일어날수가있다. 그래서 
컴퓨터2(마스터)에 쓰기를해서 컴퓨터4(슬레이브)에 복제를한뒤 
컴퓨터4 는 읽기전용으로 쓰면된다

이러면 부하가 줄어드는 결과를 가져온다~

근데 또 사용자가 많아지면 한계도달...

* 컴퓨터 5구매 후 

 컴퓨터5(mysql slave2) 로 읽기전용 쓴다 

php는 컴퓨터4,5 랜덤으로 읽어들인다.

읽기쪽이 부담이많이된다 왜? 게시글을 읽는사람이더많으니

계속 하다보면 slave3 ,4 ,5  점점 늘리면됨

근데 컴퓨터2(master)에도 문제가생기기시작하겠지 

컴퓨터6(master2)을 사서 그떄 샤딩을 쓴다 !

*샤딩(쪼갠다)  

컴퓨터2(master) 서버에는 1~1000번 까지의 사용자의정보만을저장 
컴퓨터6(master2) 서버에는 2~3000번 까지의 사용자의정보만을저장 

이렇게하면 부하가줄어들겠죠 복잡한작업이필요하고 어렵다

하지만 스케일을 높이고싶으면 샤딩이 필요한 순간이 올수도있고 분명이온다

---이런식으로 db관리는 어느정도된다! --


** 웹서버나 php는 어떻게 스케일아웃을 하냐 ? 

데이터를 저장하는게 아니라서 디비보다는 쉽다

php는 컴퓨터7(php) 사서깔고 웹서버가 컴퓨터3(php) 이렇게 왔다갔다 요청을해서  
				     컴퓨터7(php)		

각각의 php엔진이 디비에 접속해서 처리

db는 php가 교통경찰처럼 분산해서 처리해준다

php는 웹서버가 왔다갔다하면서 분산해서 처리해준다 그러면?

웹서버 는 누가 분산해주냐 ?? 

웹서버를 스케일아웃하는 방법 여러가지가있지만 

2가지를 알아보자

웹서버에 접속하는 클라이언트를보면 

사용자가 ex)naver.com 을 입력하고 엔터를치면 

컴퓨터는 저 도메인을보고 찾아갈수있는 능력이없다. 

그래서 사용자몰래 DNS 라는 컴퓨터에 접속해서 

naver.com 의 아이피주소받아서 알아내서

접속한다. 이것처럼 사용자가 컴퓨터1(웹서버)의 아이피를 dns 서버에 물어봐서 

알아서 접속하겠죠?

이러한점을 착안해서 

웹서버를 분산하는 

1) '라운드로빈' 이라는 방법을쓴다

컴퓨터8(웹서버2) 사서 웹서버 설치후 

사용자가 접속할때 dns서버가 한번은  컴퓨터1(웹서버)
				한번은 컴퓨터2(웹서버2)
					이렇게 부하분산 을한다.


2) '로드밸런스' 방법

부하를 분산해주는 장비? 

전용장비일수도있고 컴퓨터에설치되어있는 소프트웨어일수도있다

사용자가 이 로드밸런스에 다접속한다!

모든트래픽을 받아서 어떤사용자의 접속은 컴퓨터1(웹서버)
		   또 어떤사용자의 접속은 컴퓨터8(웹서버2) 로 보내준다

장점 = 로드밸런스가 웹서버를 감시하는 기능이있어서 
	트래픽이 높은 웹서버에는 사용자는안보내준다
	죽은서버가있다면 그쪽으로는 트래픽을안보낸다 뭐이런식의
 	교통경찰같은느낌 지능적인 부하분산을 한다!


--자 이렇게해서 우리가 좀더 규모있는 애플리케이션을 만드는 인프라레벨에서의
  어떤 변화들에 대해 알아봤습니다---



최근 트렌드 = 클라우드컴퓨팅 핵심 -가상화 
				  -종량제 

자기가 필요한컴퓨터를 빠르게만들어서 빠르게 사용할수있다!

로드밸런스를 기본적으로 쓰는데 

이로드밸런스에 우리가 대여한 컴퓨터를 연결하는데 로드밸런스가 감시를하기때문에

만약 대여한컴퓨터가 cpu점유율이 80퍼 이상이 10분이상지속된다 ? 

자동으로 또다른 컴퓨터를 만들어서 로드밸런스에 연결한다 !

반대로 cpu점유율이 낮아지면 자동으로 컴퓨터를 없앤다=종량제 합리적인 가격
 
스케일러빌리티는 트래픽이낮아지면 스케일을 작게하는것도 중요!
그래서 클라우드서비스가 이러한부분에서 유리!

강력하다! 하지만 많이공부해야할거다..